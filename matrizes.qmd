# Matrizes de vizinhos espaciais

## Leitura do shapefile

Para a leitura de arquivos **shapefile** no R, precisamos usar alguns pacotes. Após a instalação dos pacotes, use os seguintes comandos.

```{r}
# Pacotes
library(sf)
library(sp)

# Abra o arquivo 'gm10.shp'
# fp_mg.shp <- rgdal::readOGR("data", "FP_MG", encoding = "ISO-8859-1")
fp_mg.shp <- st_read("data/FP_MG.shp", options = "ENCODING=WINDOWS-1252")
fp_mg.shp <- st_make_valid(fp_mg.shp)
fp_mg.shp <- as_Spatial(fp_mg.shp)
# encoding = "UTF-8"

# Plotar o mapa
plot(fp_mg.shp)
```

Para a criação de matrizes de vizinhos espaciais, iremos utilizar o pacote `spdep`.

```{r}
# Pacote
library(spdep)
```

### Matriz queen e rook

```{r}
# Matriz queen
w1 <- nb2listw(poly2nb(fp_mg.shp, queen = TRUE))
summary(w1)

# Matriz queen 2ª ordem
w1.2 <- nb2listw(nblag_cumul(nblag(poly2nb(fp_mg.shp, queen = TRUE), maxlag = 2)))

# Matrix queen padronizada na linha
w1.w <- nb2listw(poly2nb(fp_mg.shp, queen=TRUE), style="W")
summary(w1.w)

# Matriz rook
w2 <- nb2listw(poly2nb(fp_mg.shp, queen = FALSE))
summary(w2)

# Matriz rook padronizada globalmente
w2.c <- nb2listw(poly2nb(fp_mg.shp, queen = FALSE), style = "C")
summary(w2.c)

```

### Distância inversa

```{r}
coords <- coordinates(fp_mg.shp)
nb <- dnearneigh(coords, 0, 1000)
dlist <- nbdists(nb, coords)
dlist <- lapply(dlist, function(x) 1/x^2)
w3 <- nb2listw(nb, glist=dlist)
summary(w3)

# Distância inversa padronizada pelo número de vizinhos
w3.u <- nb2listw(nb, glist=dlist, style="U")
summary(w3.u)
```

Para ver mais opções, veja a ajuda deste comando: `?nb2listw`

### Matriz de k-vizinhos espaciais

A escolha do número ideal de $k$ vizinhos será realizada testando-se vários $k$ e utilizando-se o que retornou o maior valor para a estatística $I$ de Moran significativo.

```{r}
# Número de permutações
per <- 999

# Número máximo de k vizinhos testados
kv <- 20

# Nome dos registros
IDs <- row.names(fp_mg.shp@data)

# Criação da tabela que irá receber a estatística I de Moran e significância para cada k testado
res.pesos <- data.frame(k=numeric(),i=numeric(),valorp=numeric())

# Início do loop
for(k in 1:kv)
{
  # Armazenando número k atual
  res.pesos[k,1] <- k
  # Calculando o I e significância para o k atual
  moran.k <- moran.mc(fp_mg.shp@data$Q,
                      listw=nb2listw(knn2nb(
                      knearneigh(coords, k=k),
                      row.names=IDs),style="B"),
                      nsim=per)
  # Armazenando o valor I para o k atual
  res.pesos[k,2] <- moran.k$statistic
  # Armazenando o p-value para o k atual
  res.pesos[k,3] <- moran.k$p.value
}

# Ver a tabela de k vizinhos, I de Moran e significância
res.pesos

# Sendo todos significativos, iremos usar o k que retornou o maior valor I
maxi <- which.max(res.pesos[,2])

# Criação da matriz usando o k escolhido
w5 <- nb2listw(knn2nb(knearneigh(coords, k=maxi),row.names=IDs),style="B")
summary(w5)
```

## Autocorrelação espacial global

### I de Moran

```{r}
moran.test(fp_mg.shp@data$Q, listw = w5)
moran.mc(fp_mg.shp@data$Q, listw = w5, nsim = 999)
```

### C de Geary

```{r}
geary.test(fp_mg.shp@data$Q, listw = w5)
geary.mc(fp_mg.shp@data$Q, listw = w5, nsim = 999)
```

### G de Getis-Ord

```{r}
globalG.test(as.vector(scale(fp_mg.shp@data$Q, center = FALSE)), listw = w5, B1correct = TRUE)
```

## Autocorrelação espacial local

### G de Gettis-Ords

```{r}
lg1 <- localG(fp_mg.shp@data$Q, listw = w5)
summary(lg1)
hist(lg1)
```

### I de Moran

```{r}
# Cálculo
lm1 <- localmoran(fp_mg.shp@data$Q, listw = w5)
summary(lm1)

# Quantos são significativos?
lm1 <- as.data.frame(lm1)
table(lm1$`Pr(z > 0)` < 0.05)
```

## Diagrama de dispersão de Moran

```{r}
moran.plot(fp_mg.shp@data$Q, listw = w5)
```

### Sua vez

Calcule o I de Moran local usando a matriz de vizinhança `w1` para a variável `AC`e verifique quantas regiões são significativas. Depois, faça o diagrama de dispersão.

```{r}

```

## LISA map

O R não tem uma função pronta para criar um mapa LISA, então nós criamos abaixo nossa própria função: `lisaplot`. Depois de declarada, uma função pode ser usada repetidamente variando seus argumentos.

Rode o código abaixo.

```{r}
lisaplot <- function(shapefile, values, listw, pval = 0.05){
  require(spdep)
  
  svalues <- as.vector(scale(values, scale = FALSE))
  lag_svalues <- spdep::lag.listw(listw, svalues)
  locm <- spdep::localmoran(values, listw)
  sig <- rep(0, length(values))
  
  sig[(svalues >= 0 & lag_svalues >= 0) & (locm[,5] <= pval)] <- 1
  sig[(svalues <= 0 & lag_svalues <= 0) & (locm[,5] <= pval)] <- 2
  sig[(svalues >= 0 & lag_svalues <= 0) & (locm[,5] <= pval)] <- 3
  sig[(svalues <= 0 & lag_svalues >= 0) & (locm[,5] <= pval)] <- 4
  sig[locm[,5] > pval] <- 5
  
  breaks <- seq(1, 5, 1)
  labels <- c("Alto-Alto", "Baixo-Baixo", "Alto-Baixo", "Baixo-Alto", "N. Sig.")
  np <- findInterval(sig, breaks)
  colors <- c("red", "blue", "lightpink", "skyblue2", "white")
  plot(shapefile, col = colors[np])
  mtext("LISA", cex = 1.5, side = 3, line = 1)
  legend("topleft", legend = labels, fill = colors, bty = "n")
}

```

E o LISA para a variável `TEMP`.

```{r}
lisaplot(fp_mg.shp, fp_mg.shp@data$TEMP, w5)
```

### Sua vez

Faça o LISA para a variável `AP` com a matriz `w1`.

```{r}

```
